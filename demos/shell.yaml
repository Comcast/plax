doc: |
  Test interaction with a shell using the new regular expression
  matching (instead of pattern matching).

  Note the use of 'serialization: string' to avoid the default JSON
  (de)serialization of messages.
spec:
  phases:
    phase1:
      steps:
        - pub:
            chan: mother
            payload:
              make:
                name: shell
                type: cmd
                config:
                  command: bash
        - recv:
            chan: mother
            pattern:
              success: true
        - pub:
            doc: |
              Set a shell variable.
            serialization: string
            payload: |
              QUESO=queso
        - pub:
            doc: |
              Use that shell variable.
            serialization: string
            payload: |
              echo "Hello, $QUESO."
        - recv:
            doc: |
              Verify that the shell variable expansion worked.  For
              fun, use a guard to check the binding from the match.
            serialization: string
            regexp: |
              Hello, (?P<x>(.*))\.
            guard: |
              return bs['?*x'] == "queso";
        - pub:
            doc: |
              Update our shell variable.
            serialization: string
            payload: |
              QUESO="good $QUESO"
        - pub:
            doc: |
              Use that shell variable again.
            serialization: string
            payload: |
              echo "I like $QUESO."
        - recv:
            doc: |
              Verify that the shell variable expansion worked.
            serialization: string
            regexp: |
              I like good queso\.
        - pub:
            doc: |
              Exit the shell with an exit code 1
            serialization:
            payload: |
              ls ?
              exit $?
        - recv:
            doc: |
              Handle the shell exit code 1
            topic: exit
            regexp: "2"
        - goto: phase2
    phase2:
      steps:
        - pub:
            chan: mother
            payload:
              make:
                name: shell2
                type: cmd
                config:
                  command: bash
        - recv:
            chan: mother
            pattern:
              success: true
        - pub:
            chan: shell2
            doc: |
              Exit the shell with an exit code 0
            serialization:
            payload: |
              echo Hello
              exit 0
        - recv:
            chan: shell2
            doc: |
              Handle the shell exit code 0
            topic: exit
            regexp: "0"
        - goto: phase3
    phase3:
      steps:
        - pub:
            chan: mother
            payload:
              make:
                name: shell3
                type: cmd
                config:
                  command: bash
        - recv:
            chan: mother
            pattern:
              success: true
        - pub:
            chan: shell3
            doc: |
              Exit the shell with an exit code 2
            serialization:
            payload: |
              echo Hmmm
              exit 2
        - recv:
            chan: shell3
            doc: |
              Expect the shell exit code 0 not 2 but only one attempt
            topic: exit
            attempts: 1
            regexp: "0"
          fails: true
        - recv:
            chan: shell3
            doc: |
              Expect the shell exit code 0 which was already consumed, so it should timeout
            topic: exit
            attempts: 1
            regexp: "0"
            timeout: 1s
          fails: true
